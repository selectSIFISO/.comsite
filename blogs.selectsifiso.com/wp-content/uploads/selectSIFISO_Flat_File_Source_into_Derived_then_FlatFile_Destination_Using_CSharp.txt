using System;
using System.Data;
using System.Data.Sql;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using Microsoft.SqlServer.Server;
using Microsoft.SqlServer.Dts.Tasks;
using Microsoft.SqlServer.Dts.Runtime;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using RuntimeWrapper = Microsoft.SqlServer.Dts.Runtime.Wrapper;
using System.IO;

namespace ST_94a9f0913c0a487aa85d3139c2ca8c59.csproj
{
    [System.AddIn.AddIn("ScriptMain", Version = "1.0", Publisher = "", Description = "")]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion        
        public void Main()
        {
            //Declare new aplication
            Application selectSIFISO_app = new Application();

            //Create package
            Package sS_pkg = new Package();

            //Assign relevant package name and description
            sS_pkg.Name = "Load Flat File Source into OLE DB Destination Using C#";
            sS_pkg.Description = "Programmatically create an SSIS 2008 package that loads a Flat File Source into OLE DB Destination Using Script Task's C# language";

            //Insert the Data Flow Task with appropriate name and some buffer space for processing of file            
            sS_pkg.Executables.Add("STOCK:PipelineTask");
            TaskHost taskHost = sS_pkg.Executables[0] as TaskHost;
            MainPipe dataFlowTask = (MainPipe)taskHost.InnerObject;
            taskHost.Name = "Dynamic Data Flow Task";
            taskHost.Properties["DefaultBufferMaxRows"].SetValue(taskHost, "1000000");

            //Insert the Flat File connection
            ConnectionManager connectionManagerFlatFile = sS_pkg.Connections.Add("FLATFILE");
            //You can change this path depending on where you have stored the flat file
            connectionManagerFlatFile.ConnectionString = @"C:\Temp\flat_src.txt";
            //Assign name to the flat file connection
            connectionManagerFlatFile.Name = "TXT_FlatFile";
            //Indicate that the flat file is delimited
            connectionManagerFlatFile.Properties["Format"].SetValue(connectionManagerFlatFile, "Delimited");
            //Indicate whether the source file has column headings or not - in this case, our sample data has column headings.
            connectionManagerFlatFile.Properties["ColumnNamesInFirstDataRow"].SetValue(connectionManagerFlatFile, Convert.ToBoolean(true));

            //Get native Flat File connection 
            RuntimeWrapper.IDTSConnectionManagerFlatFile100 connectionFlatFile = connectionManagerFlatFile.InnerObject as RuntimeWrapper.IDTSConnectionManagerFlatFile100;
            
            string line;
            int k =0; 
            //Determine the number of columns by reading the sample Flat File - line by line.            
            using (StreamReader file = new StreamReader(@"C:\Temp\flat_src.txt"))
            {
                try
                   {
                      while ((line = file.ReadLine()) != null)
                        {
                          char[] delimiters = new char[] { '|' };
                          string[] parts = line.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);

                          for (int i = 0; i < parts.Length;i++)
                          {
                              RuntimeWrapper.IDTSConnectionManagerFlatFileColumn100 flatFileCol = connectionFlatFile.Columns.Add() as RuntimeWrapper.IDTSConnectionManagerFlatFileColumn100;
                              sS_AssignColumnProperties(flatFileCol, parts[i], "|");                              
                          }
                          //Exit file after reading the first line
                          break;
                        }                
                    }
                catch (Exception ex)
                   {
                       throw ex;
                   }
                finally
                   {
                       file.Close();
                   }
            }
                        
            //Edit the last Flat File column delimiter into NewLine instead of a Comma
            connectionFlatFile.Columns[connectionFlatFile.Columns.Count - 1].ColumnDelimiter = Environment.NewLine;

            //Insert Flat File source component
            IDTSComponentMetaData100 componentSource = dataFlowTask.ComponentMetaDataCollection.New();
            componentSource.Name = "FlatFileSource";
            componentSource.ComponentClassID = "DTSAdapter.FlatFileSource";

            //Insert source design-time instance and initialise component
            CManagedComponentWrapper instanceSource = componentSource.Instantiate();
            instanceSource.ProvideComponentProperties();

            //Set source connection
            componentSource.RuntimeConnectionCollection[0].ConnectionManagerID = connectionManagerFlatFile.ID;
            componentSource.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.ToConnectionManager90(connectionManagerFlatFile);

            //Reinitialize Flat File source metadata, 
            instanceSource.AcquireConnections(null);
            instanceSource.ReinitializeMetaData();
            instanceSource.ReleaseConnections();

            //Derived Column
            IDTSComponentMetaData100 componentDerivedTransform = dataFlowTask.ComponentMetaDataCollection.New();
            componentDerivedTransform.Name = "Derived Col Transform";
            componentDerivedTransform.ComponentClassID = "DTSTransform.DerivedColumn";
            CManagedComponentWrapper DesignDerivedTransformColumns = componentDerivedTransform.Instantiate();
            DesignDerivedTransformColumns.ProvideComponentProperties();        
            
            //design time
            componentDerivedTransform.InputCollection[0].ExternalMetadataColumnCollection.IsUsed = false;
            componentDerivedTransform.InputCollection[0].HasSideEffects = false;

            //Create the path from source to derived columns 
            IDTSPath100 SourceToDerivedPath = dataFlowTask.PathCollection.New();
            SourceToDerivedPath.AttachPathAndPropagateNotifications(componentSource.OutputCollection[0], componentDerivedTransform.InputCollection[0]);

            IDTSOutputColumn100 myConCatCol = componentDerivedTransform.OutputCollection[0].OutputColumnCollection.New();
            myConCatCol.Name = "FullName";

           
            myConCatCol.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_STR, 100, 0, 0, 1252);
            myConCatCol.ExternalMetadataColumnID = 0;
            myConCatCol.ErrorRowDisposition = DTSRowDisposition.RD_FailComponent;
            myConCatCol.TruncationRowDisposition = DTSRowDisposition.RD_FailComponent;

            IDTSCustomProperty100 myConCatProp = myConCatCol.CustomPropertyCollection.New();
            myConCatProp.Name = "Expression";
            myConCatProp.Value = "[LastName] + \"\n\n,\" + [FirstName]\n";
         
            myConCatProp = myConCatCol.CustomPropertyCollection.New();
            myConCatProp.Name = "FriendlyExpression";
            myConCatProp.Value = "[LastName] + \"\n\n,\" + [FirstName]\n";
       

            IDTSOutputColumn100 myCol = componentDerivedTransform.OutputCollection[0].OutputColumnCollection.New();
            myCol.Name = "Loaddate";
            //myCol.Name = "loadDT"; this caused an error because it was named differently
            myCol.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_DBTIMESTAMP, 0, 0, 0, 0);
            myCol.ExternalMetadataColumnID = 0;
            myCol.ErrorRowDisposition = DTSRowDisposition.RD_FailComponent;
            myCol.TruncationRowDisposition = DTSRowDisposition.RD_FailComponent;

            IDTSCustomProperty100 myProp = myCol.CustomPropertyCollection.New();
            myProp.Name = "Expression";
            myProp.Value = "Getdate()";

            myProp = myCol.CustomPropertyCollection.New();
            myProp.Name = "FriendlyExpression";
            myProp.Value = "Getdate()";

            IDTSInput100 DerivedColumnInput = componentDerivedTransform.InputCollection[0];
            IDTSVirtualInput100 DerivedColumnVirtualInput = DerivedColumnInput.GetVirtualInput();
            IDTSVirtualInputColumnCollection100 DerivedColumnVirtualInputColumns = DerivedColumnVirtualInput.VirtualInputColumnCollection;
            
            //Added the below to validate input columns
            foreach (IDTSVirtualInputColumn100 virtualInputColumnDT in DerivedColumnVirtualInputColumns)
            {
                // Select column, and retain new input column
                IDTSInputColumn100 inputColumn = DesignDerivedTransformColumns.SetUsageType(DerivedColumnInput.ID, DerivedColumnVirtualInput, virtualInputColumnDT.LineageID, DTSUsageType.UT_READONLY);                
            }

            StreamWriter SW;
            //Check whether output file exists
            if (!File.Exists("E:\\MyTextFile.txt"))
            {
                //Create output text file
                SW = File.CreateText("E:\\MyTextFile.txt");
                //Insert column row seperated by pipe
                SW.WriteLine("EmployeeKey|FirstName|LastName|Title|BirthDate|HireDate|FullName|Loaddate");
                //Close the file
                SW.Close();
            }

            //Insert the Flat File Destination connection
            ConnectionManager connectionManagerFlatFileDestionation = sS_pkg.Connections.Add("FLATFILE");
            //You can change this path depending on where you have stored the flat file
            connectionManagerFlatFileDestionation.ConnectionString = "E:\\MyTextFile.txt";
            //Assign name to the flat file connection
            connectionManagerFlatFileDestionation.Name = "Sample_TXT_FlatFile_Des";
            //Indicate that the flat file is delimited
            connectionManagerFlatFileDestionation.Properties["Format"].SetValue(connectionManagerFlatFileDestionation, "Delimited");
            //Indicate whether the source file has column headings or not - in this case, our sample data has column headings.
            connectionManagerFlatFileDestionation.Properties["ColumnNamesInFirstDataRow"].SetValue(connectionManagerFlatFileDestionation, Convert.ToBoolean(true));

            //Get native Flat File connection 
            RuntimeWrapper.IDTSConnectionManagerFlatFile100 connectionFlatFileDestionation = connectionManagerFlatFileDestionation.InnerObject as RuntimeWrapper.IDTSConnectionManagerFlatFile100;

            //Determine the number of columns by reading the sample Flat File - line by line.            
            using (StreamReader file = new StreamReader("E:\\MyTextFile.txt"))
            {
                try
                {
                    while ((line = file.ReadLine()) != null)
                    {
                        char[] delimiters = new char[] { '|' };
                        string[] parts = line.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);

                        for (int j = 0; j < parts.Length; j++)
                        {
                            RuntimeWrapper.IDTSConnectionManagerFlatFileColumn100 flatFileCol = connectionFlatFileDestionation.Columns.Add() as RuntimeWrapper.IDTSConnectionManagerFlatFileColumn100;
                            sS_AssignColumnProperties(flatFileCol, parts[j], "|");
                            k++;
                        }
                        //Exit file after reading the first line
                        break;
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
                finally
                {
                    file.Close();
                }
            }

            //Edit the last Flat File column delimiter into NewLine instead of a Comma
            connectionFlatFileDestionation.Columns[connectionFlatFileDestionation.Columns.Count - 1].ColumnDelimiter = Environment.NewLine;
            
            //Insert Flat File Destination component
            IDTSComponentMetaData100 componentDestination = dataFlowTask.ComponentMetaDataCollection.New();
            componentDestination.Name = "FlatFileDestination";
            componentDestination.ComponentClassID = "DTSAdapter.FlatFileDestination";
           
            //Insert source design-time instance and initialise component
            CManagedComponentWrapper instanceDestination = componentDestination.Instantiate();
            instanceDestination.ProvideComponentProperties();

            //Set source connection
            componentDestination.RuntimeConnectionCollection[0].ConnectionManagerID = connectionManagerFlatFileDestionation.ID;
            componentDestination.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.ToConnectionManager90(connectionManagerFlatFileDestionation);

            //Reinitialize Flat File source metadata, 
            instanceDestination.AcquireConnections(null);
            instanceDestination.ReinitializeMetaData();
            instanceDestination.ReleaseConnections();

            //Connect the Flat File source to the OLE DB Destination component
            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentDerivedTransform.OutputCollection[0], componentDestination.InputCollection[0]);

            //Get input and virtual input for destination to select and map columns
            IDTSInput100 destinationInput = componentDestination.InputCollection[0];
            IDTSVirtualInput100 destinationVirtualInput = destinationInput.GetVirtualInput();
            IDTSVirtualInputColumnCollection100 destinationVirtualInputColumns = destinationVirtualInput.VirtualInputColumnCollection;

            int new_i=0;
            foreach (IDTSVirtualInputColumn100 virtualInputColumn in destinationVirtualInputColumns)
            {
                if (new_i < k)
                {
                    // Select column, and retain new input column
                    IDTSInputColumn100 inputColumn = instanceDestination.SetUsageType(destinationInput.ID, destinationVirtualInput, virtualInputColumn.LineageID, DTSUsageType.UT_READONLY);
                    // Find external column by name
                    IDTSExternalMetadataColumn100 externalColumn = destinationInput.ExternalMetadataColumnCollection[inputColumn.Name];
                    // Map input column to external column
                    instanceDestination.MapInputColumn(destinationInput.ID, inputColumn.ID, externalColumn.ID);

                    new_i++;
                }                
            }

            //Reinitialize Derived Column Transformation component's metadata
            DesignDerivedTransformColumns.AcquireConnections(null);
            DesignDerivedTransformColumns.ReinitializeMetaData();
            DesignDerivedTransformColumns.ReleaseConnections();

            //Execute the package or disable the below code if you intend running the package later
            sS_pkg.Execute();

            //Finally, save the package - in this case, we have opted to save the package into file system
            selectSIFISO_app.SaveToXml(@"E:\newFFArticle.dtsx", sS_pkg, null);   
         
            Dts.TaskResult = (int)ScriptResults.Success;
        }

        private static void sS_AssignColumnProperties(RuntimeWrapper.IDTSConnectionManagerFlatFileColumn100 flatFileCol, string getColName, string getDelim)
        {
            //Assign delimiter
            flatFileCol.ColumnType = "Delimited";
            flatFileCol.ColumnDelimiter = getDelim;

            //Indicate column data type - in this case, all the source columns will be set to String Data Type
            flatFileCol.DataType = RuntimeWrapper.DataType.DT_STR;
            //Indicate column width - in this case, width of all source columns will be set to a length of 100
            flatFileCol.ColumnWidth = 100;

            //Assign column name
            RuntimeWrapper.IDTSName100 columnName = flatFileCol as RuntimeWrapper.IDTSName100;
            columnName.Name = getColName.ToString();
        }
    }
}